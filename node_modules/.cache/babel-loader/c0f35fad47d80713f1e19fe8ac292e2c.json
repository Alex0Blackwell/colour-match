{"ast":null,"code":"var _jsxFileName = \"/home/alex/documents/programming/website/react/colour-match/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { Button } from 'react-bootstrap';\n\nfunction Tile(props) {\n  let click, classname;\n  classname = \"tile\";\n\n  if (props.colour !== \"#3b3b3b\") {\n    click = props.onClick;\n    classname += \" pointer\";\n  }\n\n  if (props.action === 1) classname += \" raise\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-lg-2 col-md-2 col-sm-2 col-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classname,\n    onClick: click,\n    style: {\n      backgroundColor: props.colour\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }));\n}\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: {},\n      seconds: 10\n    };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this); // this.startTimer();\n  }\n\n  secondsToTime(secs) {\n    let hours = Math.floor(secs / (60 * 60));\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n    let obj = {\n      \"h\": hours,\n      \"m\": minutes,\n      \"s\": seconds\n    };\n    return obj;\n  }\n\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\n    this.setState({\n      time: timeLeftVar\n    });\n  }\n\n  startTimer() {\n    if (this.timer == 0 && this.state.seconds > 0 || this.props.restarted) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({\n      time: this.secondsToTime(seconds),\n      seconds: seconds\n    }); // Check if we're at zero.\n\n    if (seconds == 0) {\n      clearInterval(this.timer);\n    }\n  }\n\n  render() {\n    // if(props.restart) {\n    //   clearInterval(this.timer);\n    //   this.state = { time: {}, seconds: 10 };\n    //   this.timer = 0;\n    //   this.startTimer = this.startTimer.bind(this);\n    //   this.countDown = this.countDown.bind(this);\n    // }\n    this.startTimer();\n\n    if (this.props.pause) {\n      console.log(\"in\");\n      clearInterval(this.timer);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, \"s: \", this.state.time.s);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStarted: false,\n      win: false,\n      roundScore: 0,\n      numFlipped: 0,\n      colourToMatch: null,\n      indexOfLast: null,\n      colours: this.randomiseColours(),\n      tileAction: Array(18).fill(0)\n    };\n  }\n\n  handleClick(colour, index) {\n    this.state.gameStarted = true;\n    this.state.numFlipped++;\n\n    if (this.state.numFlipped === 2) {\n      if (this.state.colourToMatch === colour && this.state.indexOfLast !== index) {\n        console.log(\"Nice, that's a match\");\n        this.state.roundScore++;\n        this.updateColours([index, this.state.indexOfLast], 2);\n      } else {\n        console.log(\"Not epic, not a match\");\n      }\n\n      let newTileAction = this.state.tileAction;\n      newTileAction[this.state.indexOfLast] = 0;\n      newTileAction[index] = 0;\n      this.setState({\n        numFlipped: 0,\n        colourToMatch: null,\n        indexOfLast: null,\n        tileAction: newTileAction\n      });\n    } else if (this.state.numFlipped === 1) {\n      console.log(\"waiting for next...\");\n      let newTileAction = this.state.tileAction;\n      newTileAction[index] = 1; // console.log(tindex, newTileAction);\n\n      this.setState({\n        colourToMatch: colour,\n        indexOfLast: index,\n        tileAction: newTileAction\n      });\n    }\n  }\n\n  updateColours(indexChangeArr, action) {\n    // where action is 0 for normal, 1 for raised, and 2 for dead\n    let newColours = this.state.colours;\n\n    for (let i = 0; i < indexChangeArr.length; i++) {\n      if (action === 2) {\n        // if dead\n        newColours[indexChangeArr[i]] = \"#3b3b3b\";\n      }\n    }\n\n    this.setState({\n      colours: newColours\n    });\n  }\n\n  randomiseColours() {\n    let allColours = ['#b99cff', '#ed9cff', '#ff9ca9', '#ffca9c', '#f8ff9c', '#9cffb0', '#9cfff3', '#9cc4ff', '#9c9cff'];\n    let doubles = []; // first populate array\n\n    let i = 0;\n\n    while (i < allColours.length) {\n      doubles.push(allColours[i]);\n      doubles.push(allColours[i]);\n      i++;\n    } // then randomise it\n\n\n    for (let i = 0; i < doubles.length; i++) {\n      // get random index and swap them\n      let randI = Math.floor(Math.random() * doubles.length);\n      let _tmp = doubles[randI];\n      doubles[randI] = doubles[i];\n      doubles[i] = _tmp;\n    }\n\n    return doubles;\n  }\n\n  renderTiles() {\n    let res = [];\n    let actionArr = this.state.tileAction; // console.log(actionArr);\n\n    const colours = this.state.colours;\n    colours.map((colour, index) => res.push( /*#__PURE__*/React.createElement(Tile, {\n      key: index.toString(),\n      onClick: () => this.handleClick(colour, index),\n      colour: colour,\n      action: actionArr[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 16\n      }\n    })));\n    return res;\n  }\n\n  restart() {\n    this.setState({\n      gameStarted: false,\n      roundScore: 0,\n      numFlipped: 0,\n      colourToMatch: null,\n      indexOfLast: null,\n      colours: this.randomiseColours(),\n      tileAction: Array(18).fill(0)\n    });\n  }\n\n  render() {\n    let score = \"Matches left: \" + (9 - this.state.roundScore);\n\n    if (this.state.roundScore >= 9) {\n      score = \"You Win!\";\n      this.state.win = true;\n    }\n\n    let timer = \"s: 10\";\n    if (this.state.gameStarted) timer = /*#__PURE__*/React.createElement(Timer, {\n      pause: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 15\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }\n    }, \" \", this.props.title, \" \"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }\n    }, \" \", score, \" \"), timer, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }\n    }, this.renderTiles()), /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-light\",\n      onClick: () => this.restart(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }\n    }, \"Restart\"), ' ');\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Game, {\n    title: \"Match the Colours!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/alex/documents/programming/website/react/colour-match/src/App.js"],"names":["React","Button","Tile","props","click","classname","colour","onClick","action","backgroundColor","Timer","Component","constructor","state","time","seconds","timer","startTimer","bind","countDown","secondsToTime","secs","hours","Math","floor","divisor_for_minutes","minutes","divisor_for_seconds","ceil","obj","componentDidMount","timeLeftVar","setState","restarted","setInterval","clearInterval","render","pause","console","log","s","Game","gameStarted","win","roundScore","numFlipped","colourToMatch","indexOfLast","colours","randomiseColours","tileAction","Array","fill","handleClick","index","updateColours","newTileAction","indexChangeArr","newColours","i","length","allColours","doubles","push","randI","random","_tmp","renderTiles","res","actionArr","map","toString","restart","score","title","App"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Button } from 'react-bootstrap';\n\n\nfunction Tile(props) {\n  let click, classname;\n  classname = \"tile\";\n  if(props.colour !== \"#3b3b3b\") {\n    click = props.onClick;\n    classname += \" pointer\";\n  }\n  if(props.action === 1)\n    classname += \" raise\";\n\n  return(\n    <div className=\"col-lg-2 col-md-2 col-sm-2 col-4\">\n      <div className={classname} onClick={click} style={{backgroundColor: props.colour}}>\n      </div>\n    </div>\n  );\n}\n\n\n\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { time: {}, seconds: 10 };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n    // this.startTimer();\n  }\n\n  secondsToTime(secs){\n    let hours = Math.floor(secs / (60 * 60));\n\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n\n    let obj = {\n      \"h\": hours,\n      \"m\": minutes,\n      \"s\": seconds\n    };\n    return obj;\n  }\n\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\n    this.setState({ time: timeLeftVar });\n  }\n\n  startTimer() {\n    if (this.timer == 0 && this.state.seconds > 0 || this.props.restarted) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({\n      time: this.secondsToTime(seconds),\n      seconds: seconds,\n    });\n\n    // Check if we're at zero.\n    if (seconds == 0) {\n      clearInterval(this.timer);\n    }\n  }\n\n  render() {\n    // if(props.restart) {\n    //   clearInterval(this.timer);\n    //   this.state = { time: {}, seconds: 10 };\n    //   this.timer = 0;\n    //   this.startTimer = this.startTimer.bind(this);\n    //   this.countDown = this.countDown.bind(this);\n    // }\n    this.startTimer();\n    if(this.props.pause) {\n      console.log(\"in\");\n      clearInterval(this.timer);\n    }\n    return(\n      <div>s: {this.state.time.s}</div>\n    );\n  }\n}\n\n\n\n\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStarted: false,\n      win: false,\n      roundScore: 0,\n      numFlipped: 0,\n      colourToMatch: null,\n      indexOfLast: null,\n      colours: this.randomiseColours(),\n      tileAction: Array(18).fill(0),\n    }\n  }\n\n  handleClick(colour, index) {\n    this.state.gameStarted = true;\n    this.state.numFlipped++;\n    if(this.state.numFlipped === 2) {\n      if(this.state.colourToMatch === colour && this.state.indexOfLast !== index) {\n        console.log(\"Nice, that's a match\");\n        this.state.roundScore++;\n        this.updateColours([index,this.state.indexOfLast], 2);\n      } else {\n        console.log(\"Not epic, not a match\");\n      }\n      let newTileAction = this.state.tileAction;\n      newTileAction[this.state.indexOfLast] = 0;\n      newTileAction[index] = 0;\n      this.setState({\n        numFlipped: 0,\n        colourToMatch: null,\n        indexOfLast: null,\n        tileAction: newTileAction,\n      });\n    }\n    else if(this.state.numFlipped === 1) {\n      console.log(\"waiting for next...\")\n      let newTileAction = this.state.tileAction;\n      newTileAction[index] = 1;\n      // console.log(tindex, newTileAction);\n      this.setState({\n        colourToMatch: colour,\n        indexOfLast: index,\n        tileAction: newTileAction,\n      });\n    }\n\n  }\n\n  updateColours(indexChangeArr, action) {\n    // where action is 0 for normal, 1 for raised, and 2 for dead\n    let newColours = this.state.colours;\n\n    for(let i = 0; i < indexChangeArr.length; i++) {\n      if(action === 2) {\n        // if dead\n        newColours[indexChangeArr[i]] = \"#3b3b3b\";\n      }\n    }\n\n    this.setState({\n      colours: newColours,\n    });\n  }\n\n  randomiseColours() {\n    let allColours = ['#b99cff','#ed9cff','#ff9ca9','#ffca9c','#f8ff9c',\n    '#9cffb0','#9cfff3','#9cc4ff', '#9c9cff'];\n    let doubles = [];\n\n    // first populate array\n    let i = 0;\n    while(i < allColours.length) {\n      doubles.push(allColours[i]);\n      doubles.push(allColours[i]);\n      i++;\n    }\n\n    // then randomise it\n    for(let i = 0; i < doubles.length; i++) {\n      // get random index and swap them\n      let randI = Math.floor(Math.random()*doubles.length);\n      let _tmp = doubles[randI];\n      doubles[randI] = doubles[i];\n      doubles[i] = _tmp;\n    }\n\n    return doubles;\n  }\n\n  renderTiles() {\n    let res = [];\n\n    let actionArr = this.state.tileAction;\n    // console.log(actionArr);\n    const colours = this.state.colours;\n\n    colours.map((colour, index) =>\n      res.push(<Tile\n        key={index.toString()}\n        onClick={() => this.handleClick(colour, index)}\n        colour={colour}\n        action={actionArr[index]}\n        />),\n    );\n\n    return (res);\n  }\n\n\n  restart() {\n    this.setState({\n      gameStarted: false,\n      roundScore: 0,\n      numFlipped: 0,\n      colourToMatch: null,\n      indexOfLast: null,\n      colours: this.randomiseColours(),\n      tileAction: Array(18).fill(0),\n    });\n  }\n\n\n  render() {\n    let score = \"Matches left: \" + (9-this.state.roundScore);\n    if(this.state.roundScore >= 9) {\n      score = \"You Win!\"\n      this.state.win = true;\n    }\n    let timer = \"s: 10\";\n    if(this.state.gameStarted)\n      timer = <Timer pause={true}/>\n    return(\n      <div className=\"container\">\n        <h1> {this.props.title} </h1>\n        <h5> {score} </h5>\n        {timer}\n        <div className=\"row\">\n        {\n          this.renderTiles()\n        }\n        </div>\n        <Button variant=\"outline-light\" onClick={() => this.restart()}>Restart</Button>{' '}\n      </div>\n\n    );\n  }\n\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Game\n        title={\"Match the Colours!\"}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}