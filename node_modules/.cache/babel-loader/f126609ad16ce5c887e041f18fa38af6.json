{"ast":null,"code":"var _jsxFileName = \"/home/alex/documents/programming/website/react/sfu-voting/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nfunction Tile(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-lg-4 col-md-4 col-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    style: {\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }));\n}\n\nclass Votes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      oneFlipped: false,\n      colours: this.randomiseColours()\n    };\n  }\n\n  handleClick(colour) {\n    console.log(\"the colour is\", colour); // let totalPresses = this.state.tileVotes;\n    // totalPresses[i]++;\n    // this.setState({\n    //   // oneFlipped: !oneFlipped,\n    //   tileVotes: totalPresses,\n    // });\n  }\n\n  randomiseColours() {\n    let allColours = ['#b99cff', '#ed9cff', '#ff9ca9', '#ffca9c', '#f8ff9c', '#9cffb0', '#9cfff3', '#9cc4ff', '#9c9cff'];\n    let doubles = []; // first populate array\n\n    let i = 0;\n\n    while (i < allColours.length) {\n      doubles.push(allColours[i]);\n      doubles.push(allColours[i]);\n      i++;\n    } // console.log(\"res before is is: \", res);\n    // then randomise it\n\n\n    for (let i = 0; i < doubles.length; i++) {\n      // get random index and swap them\n      let randI = Math.floor(Math.random() * doubles.length);\n      let _tmp = doubles[randI];\n      doubles[randI] = doubles[i];\n      doubles[i] = _tmp;\n    }\n\n    return doubles;\n  }\n\n  renderTiles() {\n    let res = [];\n    const colours = this.state.colours; // let i = 0;\n\n    const listItems = colours.map((colour, index) => res.push( /*#__PURE__*/React.createElement(Tile, {\n      key: index.toString(),\n      onClick: () => this.handleClick(colour),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 16\n      }\n    }))); // for(let i = 0; i < 18; ++i) {\n    //   res.push(<Tile key={i.toString()} onClick={() => this.handleClick(i)}/>);\n    // }\n\n    return res;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, \" \", this.props.title, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, this.renderTiles()));\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Votes, {\n    title: \"Match the Colours!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/alex/documents/programming/website/react/sfu-voting/src/App.js"],"names":["React","Tile","props","onClick","backgroundColor","Votes","Component","constructor","state","oneFlipped","colours","randomiseColours","handleClick","colour","console","log","allColours","doubles","i","length","push","randI","Math","floor","random","_tmp","renderTiles","res","listItems","map","index","toString","render","title","App"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nfunction Tile(props) {\n  return(\n    <div className=\"col-lg-4 col-md-4 col-6\">\n      <div className=\"tile\" onClick={props.onClick} style={{backgroundColor: \"white\"}}>\n      </div>\n    </div>\n  );\n}\n\nclass Votes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      oneFlipped: false,\n      colours: this.randomiseColours(),\n    }\n  }\n\n  handleClick(colour) {\n    console.log(\"the colour is\", colour);\n    // let totalPresses = this.state.tileVotes;\n    // totalPresses[i]++;\n    // this.setState({\n    //   // oneFlipped: !oneFlipped,\n    //   tileVotes: totalPresses,\n    // });\n  }\n\n  randomiseColours() {\n    let allColours = ['#b99cff','#ed9cff','#ff9ca9','#ffca9c','#f8ff9c',\n    '#9cffb0','#9cfff3','#9cc4ff', '#9c9cff'];\n    let doubles = [];\n\n    // first populate array\n    let i = 0;\n    while(i < allColours.length) {\n      doubles.push(allColours[i]);\n      doubles.push(allColours[i]);\n      i++;\n    }\n    // console.log(\"res before is is: \", res);\n\n    // then randomise it\n    for(let i = 0; i < doubles.length; i++) {\n      // get random index and swap them\n      let randI = Math.floor(Math.random()*doubles.length);\n      let _tmp = doubles[randI];\n      doubles[randI] = doubles[i];\n      doubles[i] = _tmp;\n    }\n\n    return doubles;\n  }\n\n  renderTiles() {\n    let res = [];\n\n    const colours = this.state.colours;\n    // let i = 0;\n    const listItems = colours.map((colour, index) =>\n      res.push(<Tile key={index.toString()} onClick={() => this.handleClick(colour)}/>),\n    );\n\n    // for(let i = 0; i < 18; ++i) {\n    //   res.push(<Tile key={i.toString()} onClick={() => this.handleClick(i)}/>);\n    // }\n\n    return (res);\n  }\n\n  render() {\n    return(\n      <div className=\"container\">\n        <h1> {this.props.title} </h1>\n        <div className=\"row\">\n        {\n          this.renderTiles()\n        }\n        </div>\n      </div>\n\n    );\n  }\n\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Votes\n        title={\"Match the Colours!\"}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}