{"ast":null,"code":"var _jsxFileName = \"/home/alex/documents/programming/website/react/colour-match/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { Button } from 'react-bootstrap';\n\nfunction Tile(props) {\n  let click, classname;\n  classname = \"tile\";\n\n  if (props.colour !== \"#3b3b3b\") {\n    click = props.onClick;\n    classname += \" pointer\";\n  }\n\n  if (props.action === 1) classname += \" raise\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-lg-2 col-md-2 col-sm-2 col-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classname,\n    onClick: click,\n    style: {\n      backgroundColor: props.colour\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }));\n} // function Timer(props) {\n//   var interval = setInterval(function() {\n//     if(props.zero){\n//       var mins, secs;\n//       mins = secs = 0;\n//     }\n//     if(secs+1 == 60) {\n//       mins++;\n//       secs = 0;\n//     } else {\n//       secs++;\n//     }\n//     return(`${mins} minutes, ${secs} seconds`);\n//   }, 1000);\n//   return null;\n// }\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newGame: true,\n      roundScore: 0,\n      numFlipped: 0,\n      colourToMatch: null,\n      indexOfLast: null,\n      colours: this.randomiseColours(),\n      tileAction: Array(18).fill(0)\n    };\n  }\n\n  handleClick(colour, index) {\n    this.state.numFlipped++;\n\n    if (this.state.numFlipped === 2) {\n      if (this.state.colourToMatch === colour && this.state.indexOfLast !== index) {\n        console.log(\"Nice, that's a match\");\n        this.state.roundScore++;\n        this.updateColours([index, this.state.indexOfLast], 2);\n      } else {\n        console.log(\"Not epic, not a match\");\n      }\n\n      let newTileAction = this.state.tileAction;\n      newTileAction[this.state.indexOfLast] = 0;\n      newTileAction[index] = 0;\n      this.setState({\n        numFlipped: 0,\n        colourToMatch: null,\n        indexOfLast: null,\n        tileAction: newTileAction\n      });\n    } else if (this.state.numFlipped === 1) {\n      console.log(\"waiting for next...\");\n      let newTileAction = this.state.tileAction;\n      newTileAction[index] = 1; // console.log(tindex, newTileAction);\n\n      this.setState({\n        colourToMatch: colour,\n        indexOfLast: index,\n        tileAction: newTileAction\n      });\n    }\n  }\n\n  updateColours(indexChangeArr, action) {\n    // where action is 0 for normal, 1 for raised, and 2 for dead\n    let newColours = this.state.colours;\n\n    for (let i = 0; i < indexChangeArr.length; i++) {\n      if (action === 2) {\n        // if dead\n        newColours[indexChangeArr[i]] = \"#3b3b3b\";\n      }\n    }\n\n    this.setState({\n      colours: newColours\n    });\n  }\n\n  randomiseColours() {\n    let allColours = ['#b99cff', '#ed9cff', '#ff9ca9', '#ffca9c', '#f8ff9c', '#9cffb0', '#9cfff3', '#9cc4ff', '#9c9cff'];\n    let doubles = []; // first populate array\n\n    let i = 0;\n\n    while (i < allColours.length) {\n      doubles.push(allColours[i]);\n      doubles.push(allColours[i]);\n      i++;\n    } // then randomise it\n\n\n    for (let i = 0; i < doubles.length; i++) {\n      // get random index and swap them\n      let randI = Math.floor(Math.random() * doubles.length);\n      let _tmp = doubles[randI];\n      doubles[randI] = doubles[i];\n      doubles[i] = _tmp;\n    }\n\n    return doubles;\n  }\n\n  renderTiles() {\n    let res = [];\n    let actionArr = this.state.tileAction; // console.log(actionArr);\n\n    const colours = this.state.colours;\n    colours.map((colour, index) => res.push( /*#__PURE__*/React.createElement(Tile, {\n      key: index.toString(),\n      onClick: () => this.handleClick(colour, index),\n      colour: colour,\n      action: actionArr[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 16\n      }\n    })));\n    return res;\n  }\n\n  restart() {\n    this.setState({\n      newGame: true,\n      roundScore: 0,\n      numFlipped: 0,\n      colourToMatch: null,\n      indexOfLast: null,\n      colours: this.randomiseColours(),\n      tileAction: Array(18).fill(0)\n    });\n  }\n\n  render() {\n    let score = \"Matches left: \" + (9 - this.state.roundScore);\n\n    if (this.state.roundScore >= 9) {\n      score = \"You Win!\";\n      setTimeout(this.restart, 3000);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }\n    }, \" \", this.props.title, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, \" \", score, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }, this.renderTiles()), /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-light\",\n      onClick: () => this.restart(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }\n    }, \"Restart\"), ' ');\n    this.state.newGame = false;\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Game, {\n    title: \"Match the Colours!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/alex/documents/programming/website/react/colour-match/src/App.js"],"names":["React","Button","Tile","props","click","classname","colour","onClick","action","backgroundColor","Game","Component","constructor","state","newGame","roundScore","numFlipped","colourToMatch","indexOfLast","colours","randomiseColours","tileAction","Array","fill","handleClick","index","console","log","updateColours","newTileAction","setState","indexChangeArr","newColours","i","length","allColours","doubles","push","randI","Math","floor","random","_tmp","renderTiles","res","actionArr","map","toString","restart","render","score","setTimeout","title","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,MAAT,QAAuB,iBAAvB;;AAGA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,MAAIC,KAAJ,EAAWC,SAAX;AACAA,EAAAA,SAAS,GAAG,MAAZ;;AACA,MAAGF,KAAK,CAACG,MAAN,KAAiB,SAApB,EAA+B;AAC7BF,IAAAA,KAAK,GAAGD,KAAK,CAACI,OAAd;AACAF,IAAAA,SAAS,IAAI,UAAb;AACD;;AACD,MAAGF,KAAK,CAACK,MAAN,KAAiB,CAApB,EACEH,SAAS,IAAI,QAAb;AAEF,sBACE;AAAK,IAAA,SAAS,EAAC,kCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEA,SAAhB;AAA2B,IAAA,OAAO,EAAED,KAApC;AAA2C,IAAA,KAAK,EAAE;AAACK,MAAAA,eAAe,EAAEN,KAAK,CAACG;AAAxB,KAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAMD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAMI,IAAN,SAAmBV,KAAK,CAACW,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACT,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKU,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,IADE;AAEXC,MAAAA,UAAU,EAAE,CAFD;AAGXC,MAAAA,UAAU,EAAE,CAHD;AAIXC,MAAAA,aAAa,EAAE,IAJJ;AAKXC,MAAAA,WAAW,EAAE,IALF;AAMXC,MAAAA,OAAO,EAAE,KAAKC,gBAAL,EANE;AAOXC,MAAAA,UAAU,EAAEC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,CAAf;AAPD,KAAb;AASD;;AAEDC,EAAAA,WAAW,CAAClB,MAAD,EAASmB,KAAT,EAAgB;AACzB,SAAKZ,KAAL,CAAWG,UAAX;;AACA,QAAG,KAAKH,KAAL,CAAWG,UAAX,KAA0B,CAA7B,EAAgC;AAC9B,UAAG,KAAKH,KAAL,CAAWI,aAAX,KAA6BX,MAA7B,IAAuC,KAAKO,KAAL,CAAWK,WAAX,KAA2BO,KAArE,EAA4E;AAC1EC,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,aAAKd,KAAL,CAAWE,UAAX;AACA,aAAKa,aAAL,CAAmB,CAACH,KAAD,EAAO,KAAKZ,KAAL,CAAWK,WAAlB,CAAnB,EAAmD,CAAnD;AACD,OAJD,MAIO;AACLQ,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD;;AACD,UAAIE,aAAa,GAAG,KAAKhB,KAAL,CAAWQ,UAA/B;AACAQ,MAAAA,aAAa,CAAC,KAAKhB,KAAL,CAAWK,WAAZ,CAAb,GAAwC,CAAxC;AACAW,MAAAA,aAAa,CAACJ,KAAD,CAAb,GAAuB,CAAvB;AACA,WAAKK,QAAL,CAAc;AACZd,QAAAA,UAAU,EAAE,CADA;AAEZC,QAAAA,aAAa,EAAE,IAFH;AAGZC,QAAAA,WAAW,EAAE,IAHD;AAIZG,QAAAA,UAAU,EAAEQ;AAJA,OAAd;AAMD,KAjBD,MAkBK,IAAG,KAAKhB,KAAL,CAAWG,UAAX,KAA0B,CAA7B,EAAgC;AACnCU,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,UAAIE,aAAa,GAAG,KAAKhB,KAAL,CAAWQ,UAA/B;AACAQ,MAAAA,aAAa,CAACJ,KAAD,CAAb,GAAuB,CAAvB,CAHmC,CAInC;;AACA,WAAKK,QAAL,CAAc;AACZb,QAAAA,aAAa,EAAEX,MADH;AAEZY,QAAAA,WAAW,EAAEO,KAFD;AAGZJ,QAAAA,UAAU,EAAEQ;AAHA,OAAd;AAKD;AAEF;;AAEDD,EAAAA,aAAa,CAACG,cAAD,EAAiBvB,MAAjB,EAAyB;AACpC;AACA,QAAIwB,UAAU,GAAG,KAAKnB,KAAL,CAAWM,OAA5B;;AAEA,SAAI,IAAIc,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,cAAc,CAACG,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,UAAGzB,MAAM,KAAK,CAAd,EAAiB;AACf;AACAwB,QAAAA,UAAU,CAACD,cAAc,CAACE,CAAD,CAAf,CAAV,GAAgC,SAAhC;AACD;AACF;;AAED,SAAKH,QAAL,CAAc;AACZX,MAAAA,OAAO,EAAEa;AADG,KAAd;AAGD;;AAEDZ,EAAAA,gBAAgB,GAAG;AACjB,QAAIe,UAAU,GAAG,CAAC,SAAD,EAAW,SAAX,EAAqB,SAArB,EAA+B,SAA/B,EAAyC,SAAzC,EACjB,SADiB,EACP,SADO,EACG,SADH,EACc,SADd,CAAjB;AAEA,QAAIC,OAAO,GAAG,EAAd,CAHiB,CAKjB;;AACA,QAAIH,CAAC,GAAG,CAAR;;AACA,WAAMA,CAAC,GAAGE,UAAU,CAACD,MAArB,EAA6B;AAC3BE,MAAAA,OAAO,CAACC,IAAR,CAAaF,UAAU,CAACF,CAAD,CAAvB;AACAG,MAAAA,OAAO,CAACC,IAAR,CAAaF,UAAU,CAACF,CAAD,CAAvB;AACAA,MAAAA,CAAC;AACF,KAXgB,CAajB;;;AACA,SAAI,IAAIA,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGG,OAAO,CAACF,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC;AACA,UAAIK,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcL,OAAO,CAACF,MAAjC,CAAZ;AACA,UAAIQ,IAAI,GAAGN,OAAO,CAACE,KAAD,CAAlB;AACAF,MAAAA,OAAO,CAACE,KAAD,CAAP,GAAiBF,OAAO,CAACH,CAAD,CAAxB;AACAG,MAAAA,OAAO,CAACH,CAAD,CAAP,GAAaS,IAAb;AACD;;AAED,WAAON,OAAP;AACD;;AAEDO,EAAAA,WAAW,GAAG;AACZ,QAAIC,GAAG,GAAG,EAAV;AAEA,QAAIC,SAAS,GAAG,KAAKhC,KAAL,CAAWQ,UAA3B,CAHY,CAIZ;;AACA,UAAMF,OAAO,GAAG,KAAKN,KAAL,CAAWM,OAA3B;AAEAA,IAAAA,OAAO,CAAC2B,GAAR,CAAY,CAACxC,MAAD,EAASmB,KAAT,KACVmB,GAAG,CAACP,IAAJ,eAAS,oBAAC,IAAD;AACP,MAAA,GAAG,EAAEZ,KAAK,CAACsB,QAAN,EADE;AAEP,MAAA,OAAO,EAAE,MAAM,KAAKvB,WAAL,CAAiBlB,MAAjB,EAAyBmB,KAAzB,CAFR;AAGP,MAAA,MAAM,EAAEnB,MAHD;AAIP,MAAA,MAAM,EAAEuC,SAAS,CAACpB,KAAD,CAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAT,CADF;AASA,WAAQmB,GAAR;AACD;;AAGDI,EAAAA,OAAO,GAAG;AACR,SAAKlB,QAAL,CAAc;AACZhB,MAAAA,OAAO,EAAE,IADG;AAEZC,MAAAA,UAAU,EAAE,CAFA;AAGZC,MAAAA,UAAU,EAAE,CAHA;AAIZC,MAAAA,aAAa,EAAE,IAJH;AAKZC,MAAAA,WAAW,EAAE,IALD;AAMZC,MAAAA,OAAO,EAAE,KAAKC,gBAAL,EANG;AAOZC,MAAAA,UAAU,EAAEC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,CAAf;AAPA,KAAd;AASD;;AAGD0B,EAAAA,MAAM,GAAG;AACP,QAAIC,KAAK,GAAG,oBAAoB,IAAE,KAAKrC,KAAL,CAAWE,UAAjC,CAAZ;;AACA,QAAG,KAAKF,KAAL,CAAWE,UAAX,IAAyB,CAA5B,EAA+B;AAC7BmC,MAAAA,KAAK,GAAG,UAAR;AACAC,MAAAA,UAAU,CAAC,KAAKH,OAAN,EAAe,IAAf,CAAV;AACD;;AACD,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM,KAAK7C,KAAL,CAAWiD,KAAjB,MADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAMF,KAAN,MAFF,eAGE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,KAAKP,WAAL,EAFF,CAHF,eAQE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,eAAhB;AAAgC,MAAA,OAAO,EAAE,MAAM,KAAKK,OAAL,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARF,EAQkF,GARlF,CADF;AAaA,SAAKnC,KAAL,CAAWC,OAAX,GAAqB,KAArB;AACD;;AA9IgC;;AAmJnC,SAASuC,GAAT,GAAe;AACb,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACA,IAAA,KAAK,EAAE,oBADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AASD;;AAED,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Button } from 'react-bootstrap';\n\n\nfunction Tile(props) {\n  let click, classname;\n  classname = \"tile\";\n  if(props.colour !== \"#3b3b3b\") {\n    click = props.onClick;\n    classname += \" pointer\";\n  }\n  if(props.action === 1)\n    classname += \" raise\";\n\n  return(\n    <div className=\"col-lg-2 col-md-2 col-sm-2 col-4\">\n      <div className={classname} onClick={click} style={{backgroundColor: props.colour}}>\n      </div>\n    </div>\n  );\n}\n\n// function Timer(props) {\n//   var interval = setInterval(function() {\n//     if(props.zero){\n//       var mins, secs;\n//       mins = secs = 0;\n//     }\n//     if(secs+1 == 60) {\n//       mins++;\n//       secs = 0;\n//     } else {\n//       secs++;\n//     }\n//     return(`${mins} minutes, ${secs} seconds`);\n//   }, 1000);\n//   return null;\n// }\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newGame: true,\n      roundScore: 0,\n      numFlipped: 0,\n      colourToMatch: null,\n      indexOfLast: null,\n      colours: this.randomiseColours(),\n      tileAction: Array(18).fill(0),\n    }\n  }\n\n  handleClick(colour, index) {\n    this.state.numFlipped++;\n    if(this.state.numFlipped === 2) {\n      if(this.state.colourToMatch === colour && this.state.indexOfLast !== index) {\n        console.log(\"Nice, that's a match\");\n        this.state.roundScore++;\n        this.updateColours([index,this.state.indexOfLast], 2);\n      } else {\n        console.log(\"Not epic, not a match\");\n      }\n      let newTileAction = this.state.tileAction;\n      newTileAction[this.state.indexOfLast] = 0;\n      newTileAction[index] = 0;\n      this.setState({\n        numFlipped: 0,\n        colourToMatch: null,\n        indexOfLast: null,\n        tileAction: newTileAction,\n      });\n    }\n    else if(this.state.numFlipped === 1) {\n      console.log(\"waiting for next...\")\n      let newTileAction = this.state.tileAction;\n      newTileAction[index] = 1;\n      // console.log(tindex, newTileAction);\n      this.setState({\n        colourToMatch: colour,\n        indexOfLast: index,\n        tileAction: newTileAction,\n      });\n    }\n\n  }\n\n  updateColours(indexChangeArr, action) {\n    // where action is 0 for normal, 1 for raised, and 2 for dead\n    let newColours = this.state.colours;\n\n    for(let i = 0; i < indexChangeArr.length; i++) {\n      if(action === 2) {\n        // if dead\n        newColours[indexChangeArr[i]] = \"#3b3b3b\";\n      }\n    }\n\n    this.setState({\n      colours: newColours,\n    });\n  }\n\n  randomiseColours() {\n    let allColours = ['#b99cff','#ed9cff','#ff9ca9','#ffca9c','#f8ff9c',\n    '#9cffb0','#9cfff3','#9cc4ff', '#9c9cff'];\n    let doubles = [];\n\n    // first populate array\n    let i = 0;\n    while(i < allColours.length) {\n      doubles.push(allColours[i]);\n      doubles.push(allColours[i]);\n      i++;\n    }\n\n    // then randomise it\n    for(let i = 0; i < doubles.length; i++) {\n      // get random index and swap them\n      let randI = Math.floor(Math.random()*doubles.length);\n      let _tmp = doubles[randI];\n      doubles[randI] = doubles[i];\n      doubles[i] = _tmp;\n    }\n\n    return doubles;\n  }\n\n  renderTiles() {\n    let res = [];\n\n    let actionArr = this.state.tileAction;\n    // console.log(actionArr);\n    const colours = this.state.colours;\n\n    colours.map((colour, index) =>\n      res.push(<Tile\n        key={index.toString()}\n        onClick={() => this.handleClick(colour, index)}\n        colour={colour}\n        action={actionArr[index]}\n        />),\n    );\n\n    return (res);\n  }\n\n\n  restart() {\n    this.setState({\n      newGame: true,\n      roundScore: 0,\n      numFlipped: 0,\n      colourToMatch: null,\n      indexOfLast: null,\n      colours: this.randomiseColours(),\n      tileAction: Array(18).fill(0),\n    });\n  }\n\n\n  render() {\n    let score = \"Matches left: \" + (9-this.state.roundScore);\n    if(this.state.roundScore >= 9) {\n      score = \"You Win!\"\n      setTimeout(this.restart, 3000);\n    }\n    return(\n      <div className=\"container\">\n        <h1> {this.props.title} </h1>\n        <h3> {score} </h3>\n        <div className=\"row\">\n        {\n          this.renderTiles()\n        }\n        </div>\n        <Button variant=\"outline-light\" onClick={() => this.restart()}>Restart</Button>{' '}\n      </div>\n\n    );\n    this.state.newGame = false;\n  }\n\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Game\n        title={\"Match the Colours!\"}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}