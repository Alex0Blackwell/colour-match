{"ast":null,"code":"var _jsxFileName = \"/home/alex/documents/programming/website/react/colour-match/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nfunction Tile(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-lg-2 col-md-2 col-sm-2 col-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tile\",\n    ref: div => {\n      this.myTile = div;\n    },\n    onClick: this.onClick.bind(this),\n    style: {\n      backgroundColor: props.colour\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }));\n}\n\nclass Votes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      roundScore: 0,\n      numFlipped: 0,\n      colourToMatch: null,\n      indexOfLast: null,\n      colours: this.randomiseColours()\n    };\n  }\n\n  handleClick(colour, index) {\n    this.state.numFlipped++;\n\n    if (this.state.numFlipped === 2) {\n      if (this.state.colourToMatch === colour && this.state.indexOfLast !== index) {\n        console.log(\"Nice, that's a match\");\n        let newScore = this.state.roundScore++;\n        this.setState({\n          roundScore: newScore\n        });\n      } else {\n        console.log(\"Not epic, not a match\");\n      }\n\n      this.setState({\n        numFlipped: 0,\n        colourToMatch: null,\n        indexOfLast: null\n      });\n    } else if (this.state.numFlipped === 1) {\n      console.log(\"waiting for next...\");\n      this.setState({\n        colourToMatch: colour,\n        indexOfLast: index\n      });\n    }\n  }\n\n  randomiseColours() {\n    let allColours = ['#b99cff', '#ed9cff', '#ff9ca9', '#ffca9c', '#f8ff9c', '#9cffb0', '#9cfff3', '#9cc4ff', '#9c9cff'];\n    let doubles = []; // first populate array\n\n    let i = 0;\n\n    while (i < allColours.length) {\n      doubles.push(allColours[i]);\n      doubles.push(allColours[i]);\n      i++;\n    } // then randomise it\n\n\n    for (let i = 0; i < doubles.length; i++) {\n      // get random index and swap them\n      let randI = Math.floor(Math.random() * doubles.length);\n      let _tmp = doubles[randI];\n      doubles[randI] = doubles[i];\n      doubles[i] = _tmp;\n    }\n\n    return doubles;\n  }\n\n  renderTiles() {\n    let res = [];\n    const colours = this.state.colours;\n    const listItems = colours.map((colour, index) => res.push( /*#__PURE__*/React.createElement(Tile, {\n      key: index.toString(),\n      onClick: () => this.handleClick(colour, index),\n      colour: colour,\n      numFlipped: this.state.numFlipped,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 16\n      }\n    })));\n    return res;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, \" \", this.props.title, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, this.renderTiles()));\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Votes, {\n    title: \"Match the Colours!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/alex/documents/programming/website/react/colour-match/src/App.js"],"names":["React","Tile","props","div","myTile","onClick","bind","backgroundColor","colour","Votes","Component","constructor","state","roundScore","numFlipped","colourToMatch","indexOfLast","colours","randomiseColours","handleClick","index","console","log","newScore","setState","allColours","doubles","i","length","push","randI","Math","floor","random","_tmp","renderTiles","res","listItems","map","toString","render","title","App"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nfunction Tile(props) {\n  return(\n    <div className=\"col-lg-2 col-md-2 col-sm-2 col-4\">\n      <div className=\"tile\"\n      ref={div => {\n        this.myTile = div;\n      }}\n      onClick={this.onClick.bind(this)} \n      style={{backgroundColor: props.colour}}\n      >\n      </div>\n    </div>\n  );\n}\n\nclass Votes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      roundScore: 0,\n      numFlipped: 0,\n      colourToMatch: null,\n      indexOfLast: null,\n      colours: this.randomiseColours(),\n    }\n  }\n\n  handleClick(colour, index) {\n    this.state.numFlipped++;\n    if(this.state.numFlipped === 2) {\n      if(this.state.colourToMatch === colour && this.state.indexOfLast !== index) {\n        console.log(\"Nice, that's a match\");\n        let newScore = this.state.roundScore++;\n        this.setState({\n          roundScore: newScore,\n        });\n      } else {\n        console.log(\"Not epic, not a match\");\n      }\n      this.setState({\n        numFlipped: 0,\n        colourToMatch: null,\n        indexOfLast: null,\n      });\n    }\n    else if(this.state.numFlipped === 1) {\n      console.log(\"waiting for next...\")\n      this.setState({\n        colourToMatch: colour,\n        indexOfLast: index,\n      });\n    }\n\n  }\n\n  randomiseColours() {\n    let allColours = ['#b99cff','#ed9cff','#ff9ca9','#ffca9c','#f8ff9c',\n    '#9cffb0','#9cfff3','#9cc4ff', '#9c9cff'];\n    let doubles = [];\n\n    // first populate array\n    let i = 0;\n    while(i < allColours.length) {\n      doubles.push(allColours[i]);\n      doubles.push(allColours[i]);\n      i++;\n    }\n\n    // then randomise it\n    for(let i = 0; i < doubles.length; i++) {\n      // get random index and swap them\n      let randI = Math.floor(Math.random()*doubles.length);\n      let _tmp = doubles[randI];\n      doubles[randI] = doubles[i];\n      doubles[i] = _tmp;\n    }\n\n    return doubles;\n  }\n\n  renderTiles() {\n    let res = [];\n\n    const colours = this.state.colours;\n\n    const listItems = colours.map((colour, index) =>\n      res.push(<Tile\n        key={index.toString()}\n        onClick={() => this.handleClick(colour, index)}\n        colour={colour}\n        numFlipped={this.state.numFlipped}\n        />),\n    );\n\n    return (res);\n  }\n\n  render() {\n    return(\n      <div className=\"container\">\n        <h1> {this.props.title} </h1>\n        <div className=\"row\">\n        {\n          this.renderTiles()\n        }\n        </div>\n      </div>\n\n    );\n  }\n\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Votes\n        title={\"Match the Colours!\"}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}